
        if (fillFactor == 1) { // treat this as a special case as it will be done most often => more efficient
            for (int in = 0; in < nrInputNeurons; in++) {
                for (int out = 0; out < nrOutputNeurons; out++) {
                    Connection c = Connection.of(
                            inputNodes.get(in),
                            outputNodes.get(out),
                            DEFAULT_CONNECTION_WEIGHT,
                            true
                    );
                    geneList.add(NeuralGene.of(c, true));
                }
            }
        } else { // careful, should not be used not tested properly
            int totalConnections = nrInputNeurons * nrOutputNeurons;
            int usableConnections = (int) (fillFactor * totalConnections);
            Random r = RandomRegistry.random();
            Map<Pair<Integer, Integer>, Boolean> connMap = new HashMap<>();

            for (int i = 0; i < usableConnections; ) {
                int in = r.nextInt(nrInputNeurons);
                int out = r.nextInt(nrOutputNeurons);
                Pair<Integer, Integer> p = Pair.newPair(in, out);
                if (!connMap.containsKey(p)) {
                    connMap.put(p, TRUE);
                    Connection c = Connection.of(
                            inputNodes.get(in),
                            outputNodes.get(out),
                            DEFAULT_CONNECTION_WEIGHT,
                            true
                    );
                    geneList.add(NeuralGene.of(c, true));
                    i++;
                }
            }
        }